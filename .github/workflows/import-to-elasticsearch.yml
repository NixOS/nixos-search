name: "Hourly import to Elasticsearch"

on:
  workflow_dispatch:
  schedule:
  - cron: '0 * * * *'

permissions:
  contents: read
  issues: write

jobs:

  nixos-channels:
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.nixos-channels.outputs.matrix }}

    steps:
    - name: Checking out the repository
      uses: actions/checkout@v4

    - name: Setup
      uses: ./.github/actions/common-setup
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CACHIX_SIGNING_KEY: ${{ secrets.CACHIX_SIGNING_KEY }}

    - name: NixOS Channels
      id: nixos-channels
      run: |
        nix build -L .#nixosChannels
        channels="{\"channel\": $(< ./result)}"
        echo "$channels"
        echo "matrix=$channels" >> "$GITHUB_OUTPUT"

  import-nixpkgs:
    needs: nixos-channels
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.nixos-channels.outputs.matrix) }}

    env:
      RUST_LOG: debug
      FI_ES_EXISTS_STRATEGY: abort
      FI_ES_URL: ${{ secrets.ELASTICSEARCH_URL2 }}

    steps:
    - name: Checking out the repository
      uses: actions/checkout@v4

    - name: Setup
      uses: ./.github/actions/common-setup
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CACHIX_SIGNING_KEY: ${{ secrets.CACHIX_SIGNING_KEY }}

    - name: Import ${{ matrix.channel }} channel
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        nix run .#flake-info -- --push --elastic-schema-version=$(< VERSION) nixpkgs ${{ matrix.channel }}
      if: github.repository_owner == 'NixOS'

    - name: Warmup ${{ matrix.channel }} channel
      run: |
        for (( i = 0; i < 3; i++ )) do
          curl -sS ${{ secrets.ELASTICSEARCH_URL2 }}/latest-$(< VERSION)-nixos-${{ matrix.channel }}/_search | jq -c '.took // .'
        done
      if: github.repository_owner == 'NixOS'

    - name: Create issue if failed
      if: failure()
      uses: JasonEtco/create-an-issue@v2
      with:
        filename: .github/failing-import-issue.md
        search_existing: open
        update_existing: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CHANNEL: ${{ matrix.channel }}

  import-flakes:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        group:
          - "manual"

    env:
      RUST_LOG: debug
      FI_ES_EXISTS_STRATEGY: recreate
      FI_ES_URL: ${{ secrets.ELASTICSEARCH_URL2 }}

    steps:

    - name: Checking out the repository
      uses: actions/checkout@v4

    - name: Setup
      uses: ./.github/actions/common-setup
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CACHIX_SIGNING_KEY: ${{ secrets.CACHIX_SIGNING_KEY }}

    - name: Import ${{ matrix.group }} group
      run: |
        nix run .#flake-info -- --push --elastic-schema-version=$(< ./VERSION) group ./flakes/${{ matrix.group }}.toml ${{ matrix.group }}
      if: github.repository_owner == 'NixOS'

    - name: Warmup ${{ matrix.group }} group
      run: |
        for (( i = 0; i < 3; i++ )) do
          curl -sS ${{ secrets.ELASTICSEARCH_URL2 }}/latest-$(< VERSION)-group-${{ matrix.group }}/_search | jq -c '.took // .'
        done
      if: github.repository_owner == 'NixOS'
